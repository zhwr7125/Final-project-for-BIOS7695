count.less<-counts[,rownames(demo.dat.less)]
View(count.less)
demo.dat.less<-rbind(demo.dat[demo.dat$case=="Case",][1:10,],demo.dat[demo.dat$case=="Control",][1:10,])
count.less<-counts[,rownames(demo.dat.less)]
norm.factors = estimate.norm.factors(count.less);
## Prepare the data
nb.data = prepare.nb.data(count.less[1:50,], lib.sizes = colSums(count.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat[c(1:10,test:dim(counts)[2]),])
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat[c(1:10,test:dim(counts)[2]),])
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
demo.dat.less<-rbind(demo.dat[demo.dat$case=="Case",][1:10,],demo.dat[demo.dat$case=="Control",][1:10,])
count.less<-counts[,rownames(demo.dat.less)]
norm.factors = estimate.norm.factors(count.less);
## Prepare the data
nb.data = prepare.nb.data(count.less[1:50,], lib.sizes = colSums(count.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat[c(1:10,test:dim(counts)[2]),])
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat.less)
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
## Estimate normalization factors (we want to use the entire data set)
demo.dat.less<-rbind(demo.dat[demo.dat$case=="Case",][1:10,],demo.dat[demo.dat$case=="Control",][1:10,])
count.less<-counts[,rownames(demo.dat.less)]
norm.factors = estimate.norm.factors(count.less);
## Prepare the data
nb.data = prepare.nb.data(count.less[1:500,], lib.sizes = colSums(count.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat[c(1:10,test:dim(counts)[2]),])
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat.less)
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
## Estimate normalization factors (we want to use the entire data set)
demo.dat.less<-rbind(demo.dat[demo.dat$case=="Case",][1:10,],demo.dat[demo.dat$case=="Control",][1:10,])
count.less<-counts[,rownames(demo.dat.less)]
norm.factors = estimate.norm.factors(count.less);
## Prepare the data
nb.data = prepare.nb.data(count.less[1:10000,], lib.sizes = colSums(count.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat[c(1:10,test:dim(counts)[2]),])
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat.less)
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
## Estimate normalization factors (we want to use the entire data set)
demo.dat.less<-rbind(demo.dat[demo.dat$case=="Case",][1:10,],demo.dat[demo.dat$case=="Control",][1:10,])
count.less<-counts[,rownames(demo.dat.less)]
norm.factors = estimate.norm.factors(count.less);
## Prepare the data
nb.data = prepare.nb.data(count.less[1:1000,], lib.sizes = colSums(count.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat[c(1:10,test:dim(counts)[2]),])
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat.less)
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
print(dispersion);
plot(dispersion);
demo.dat.less<-rbind(demo.dat[demo.dat$case=="Case",][1:50,],demo.dat[demo.dat$case=="Control",][1:50,])
count.less<-counts[,rownames(demo.dat.less)]
norm.factors = estimate.norm.factors(count.less);
## Prepare the data
nb.data = prepare.nb.data(count.less[1:1000,], lib.sizes = colSums(count.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat[c(1:10,test:dim(counts)[2]),])
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat.less)
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
demo.dat.less<-rbind(demo.dat[demo.dat$case=="Case",][1:100,],demo.dat[demo.dat$case=="Control",][1:100,])
count.less<-counts[,rownames(demo.dat.less)]
norm.factors = estimate.norm.factors(count.less);
## Prepare the data
nb.data = prepare.nb.data(count.less[1:1000,], lib.sizes = colSums(count.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat[c(1:10,test:dim(counts)[2]),])
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat.less)
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
demo.dat.less<-rbind(demo.dat[demo.dat$case=="Case",],demo.dat[demo.dat$case=="Control",])
count.less<-counts[,rownames(demo.dat.less)]
norm.factors = estimate.norm.factors(count.less);
## Prepare the data
nb.data = prepare.nb.data(count.less[1:1000,], lib.sizes = colSums(count.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat[c(1:10,test:dim(counts)[2]),])
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat.less)
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
norm.factors = estimate.norm.factors(count);
## Prepare the data
nb.data = prepare.nb.data(count[1:1000,], lib.sizes = colSums(count[1:1000,]), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat[c(1:10,test:dim(counts)[2]),])
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat.less)
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
counts<-counts(obj.deseq2)
norm.factors = estimate.norm.factors(counts);
## Prepare the data
nb.data = prepare.nb.data(counts[1:1000,], lib.sizes = colSums(counts[1:1000,]), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat[c(1:10,test:dim(counts)[2]),])
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat.less)
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
View(design)
print(dispersion);
plot(dispersion);
beta0 = c(NA, NA, 0, NA, NA,NA, NA);
## Test regression coefficient
res = test.coefficient(nb.data, dispersion, design, beta0);
print(str(res));
View(res)
## Show HOA test results for top ten most differentially expressed genes
top = order(res$HOA$p.values)[1:10];
print(cbind(nb.data$counts[top,], res$HOA[top,]));
## Plot log fold change versus the fitted mean of sample 1 (analagous to an MA-plot).
plot(res$mu.tilde[,1], res$beta.hat[,2]/log(2), log="x",
xlab="Fitted mean of sample 1 under the null",
ylab="Log (base 2) fold change");
## Highlight top DE genes
points(res$mu.tilde[top,1], res$beta.hat[top,2]/log(2), col="magenta")
counts.less<-counts[1:5000,]
norm.factors = estimate.norm.factors(counts.less);
## Prepare the data
nb.data = prepare.nb.data(counts.less, lib.sizes = colSums(counts.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat[c(1:10,test:dim(counts)[2]),])
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat.less)
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
print(dispersion);
plot(dispersion);
## Specify the null hypothesis
## The null hypothesis is beta[2]=0 (beta[2] is the log fold change).
beta0 = c(NA, NA, 0, NA, NA,NA, NA);
## Test regression coefficient
res = test.coefficient(nb.data, dispersion, design, beta0);
counts.less<-counts[1:6000,]
norm.factors = estimate.norm.factors(counts.less);
## Prepare the data
nb.data = prepare.nb.data(counts.less, lib.sizes = colSums(counts.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat[c(1:10,test:dim(counts)[2]),])
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat.less)
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
View(demo.dat)
View(demo.dat.less)
counts.less<-counts[1:5000,]
norm.factors = estimate.norm.factors(counts.less);
## Prepare the data
nb.data = prepare.nb.data(counts.less, lib.sizes = colSums(counts.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
#design<-model.matrix(~female+case,data=demo.dat)
design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat)
## Estimate dispersion model.
dispersion = estimate.dispersion(nb.data, design);
print(dispersion);
plot(dispersion);
## Specify the null hypothesis
## The null hypothesis is beta[2]=0 (beta[2] is the log fold change).
beta0 = c(NA, NA, 0, NA, NA,NA, NA);
## Test regression coefficient
install.packages("class")
source("D:/Zhou, Wenru/Shared Code/temp_table1.R")
library(Hmisc)
ipf<-readRDS("D:/Course/BIOS7695/Final projects/data/ipf_data_for_wenru.RDS", refhook = NULL)
demographics<-ipf@colData@listData
demo.dat<-data.frame(matrix(unlist(demographics), nrow=340, byrow=F),stringsAsFactors=FALSE,row.names=ipf@colData@rownames)
colnames(demo.dat)<-rownames(summary(ipf@colData@listData))
demo.dat[demo.dat==""]<-NA
demo.dat$female<-as.factor(demo.dat$female)
demo.dat$case<-as.factor(demo.dat$case)
levels(demo.dat$case)<-c("Control","Case")
demo.dat$PC1_MEGA<-as.numeric(demo.dat$PC1_MEGA)
demo.dat$PC2_MEGA<-as.numeric(demo.dat$PC2_MEGA)
demo.dat$PC3_MEGA<-as.numeric(demo.dat$PC3_MEGA)
demo.dat$Ever.Smoked[demo.dat$Ever.Smoked=="Y"]<-1
demo.dat$Ever.Smoked[demo.dat$Ever.Smoked=="N"]<-0
demo.dat$Ever.Smoked<-as.factor(demo.dat$Ever.Smoked)
demo.dat$Current.smoker[demo.dat$Current.smoker=="Y"]<-1
demo.dat$Current.smoker[demo.dat$Current.smoker=="N"]<-0
demo.dat$Current.smoker[demo.dat$Current.smoker==" "]<-NA
demo.dat$Current.smoker<-as.factor(demo.dat$Current.smoker)
demo.dat$race[demo.dat$race=="black"]<-"Black or African American"
demo.dat$race[demo.dat$race=="white"]<-"White"
demo.dat$race[demo.dat$race=="asian"]<-"Asian"
demo.dat$race[demo.dat$race=="investigated-unknown"|demo.dat$race=="multiple-unspecified"|demo.dat$race=="Multiple Unspecified"|demo.dat$race=="unknown"]<-NA
demo.dat$ethnicity[demo.dat$ethnicity=="hispanic"|demo.dat$ethnicity=="hispanic or latino"]<-"Hispanic or Latino"
demo.dat$ethnicity[demo.dat$ethnicity=="non-hispanic"|demo.dat$ethnicity=="non-hispanic or latino"|demo.dat$ethnicity=="not hispanic or latino"|demo.dat$ethnicity=="Not Hispanic or Latino"]<-"Not Hispanic or Latino"
label(demo.dat$female)<-"Female"
label(demo.dat$case)<-"Case"
label(demo.dat$Ever.Smoked)<-"Ever Smoked"
label(demo.dat$Current.smoker)<-"Current smoker"
label(demo.dat$PC1_MEGA)<-"PC1 MEGA"
label(demo.dat$PC2_MEGA)<-"PC2 MEGA"
label(demo.dat$PC3_MEGA)<-"PC3 MEGA"
label(demo.dat$race)<-"Race"
label(demo.dat$ethnicity)<-"Ethnicity"
label(demo.dat$replaceable)<-"Replaceable"
#Test histrogram
hist(demo.dat$PC1_MEGA)
hist(demo.dat$PC2_MEGA)
hist(demo.dat$PC3_MEGA)
colnames(demo.dat)
table(demo.dat$female)
table(demo.dat$case)
table(demo.dat$Ever.Smoked)
table(demo.dat$Current.smoker)
table(demo.dat$race)
table(demo.dat$ethnicity)
table(demo.dat$replaceable)
#tab.dem<-final_table(demo.dat,c("female","Ever.Smoked","Current.smoker","PC1_MEGA","PC2_MEGA","PC3_MEGA","race","ethnicity","replaceable"),demo.dat$case,margin=2,single=F,2,col.names=T, summary.stat='median')
tab.dem<-final_table(demo.dat,c("female","Ever.Smoked","Current.smoker","PC1_MEGA","PC2_MEGA","PC3_MEGA","race","ethnicity","replaceable"),demo.dat$case,margin=2,single=F,ron=3,col.names=T, summary.stat='both')
missing.dem<-missing_table(demo.dat,c("female","Ever.Smoked","Current.smoker","PC1_MEGA","PC2_MEGA","PC3_MEGA","race","ethnicity","replaceable"),demo.dat$case)
View(ipf)
View(tab.dem)
View(demo.dat)
table(demo.dat$case,demo.dat$RNAseq.Plate)
library(DESeq2)
obj.deseq2 <- ipf
#Exclude gene rows with 0 counts>=10
detect.zero<-rowSums(matrix(counts(obj.deseq2) %in% seq(from=0,to=10,by=1),nrow=nrow(counts(obj.deseq2))))
table(detect.zero==0)
#KEEP detect.zero==0
filter10<-counts(obj.deseq2)[detect.zero==0,]
test<-rowSums(matrix(filter10 %in% seq(from=0,to=10,by=1),nrow=nrow(filter10)))
table(test==0)
#Exclude participants with missing ever smoke
keeplist<-rownames(demo.dat)[is.na(demo.dat$Ever.Smoked)==FALSE]
demo.dat<-demo.dat[is.na(demo.dat$Ever.Smoked)==FALSE,]
filter10<-filter10[,colnames(filter10) %in% keeplist]
#Convert to factors
obj.deseq2@colData@listData$female<-as.factor(obj.deseq2@colData@listData$female)
obj.deseq2@colData@listData$case<-as.factor(obj.deseq2@colData@listData$case)
obj.deseq2@colData@listData$Ever.Smoked<-as.factor(obj.deseq2@colData@listData$Ever.Smoked)
obj.deseq2 <- DESeqDataSetFromMatrix(countData = filter10,
colData = DataFrame(demo.dat),
design= ~ case)
library(DEFormats)
library(EDASeq)
library(edgeR)
#No need to exclude because this is from the exclude result from DESeq2
obj.edgeR<- as.DGEList(obj.deseq2)
counts<-counts(obj.deseq2)
#counts.less<-counts[13082:16081,]
counts.less<-counts[14082:16081,]
norm.factors = estimate.norm.factors(counts.less);
## Prepare the data
nb.data = prepare.nb.data(counts.less, lib.sizes = colSums(counts.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
design<-model.matrix(~case,data=demo.dat)
#design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat)
## Estimate dispersion model.
dispersion5 = estimate.dispersion(nb.data, design);
## Specify the null hypothesis
## The null hypothesis is beta[2]=0 (beta[2] is the log fold change).
beta0 = c(NA, NA, 0, NA, NA,NA, NA);
## Test regression coefficient
res5 = test.coefficient(nb.data, dispersion5, design, beta0);
library(NBPSeq)
#counts.less<-counts[13082:16081,]
counts.less<-counts[14082:16081,]
norm.factors = estimate.norm.factors(counts.less);
## Prepare the data
nb.data = prepare.nb.data(counts.less, lib.sizes = colSums(counts.less), norm.factors = norm.factors);
## Specify the model matrix (experimental design)
design<-model.matrix(~case,data=demo.dat)
#design<-model.matrix(~female+case+PC1_MEGA+PC2_MEGA+PC3_MEGA+Ever.Smoked,data=demo.dat)
## Estimate dispersion model.
dispersion5 = estimate.dispersion(nb.data, design);
## Specify the null hypothesis
## The null hypothesis is beta[2]=0 (beta[2] is the log fold change).
beta0 = c(NA, NA, 0, NA, NA,NA, NA);
## Test regression coefficient
res5 = test.coefficient(nb.data, dispersion5, design, beta0);
source("D:/Course/BIOS7695/Final projects/programs/1. Demographics.R")
#source("D:/Course/BIOS7695/Final projects/programs/2. DESeq2.R")
load("D:/Course/BIOS7695/Final projects/programs/fit.deseq2.rdata")
resultsNames(fit.deseq2)
results.deseq2<-results(fit.deseq2)
df.res.deseq2<-data.frame(results.deseq2$log2FoldChange,results.deseq2$pvalue,results.deseq2$padj,row.names = rownames(results(fit.deseq2)))
colnames(df.res.deseq2)<-c("logFC.deseq2","pvalue.deseq2","padj.deseq2")
sig.deseq2<-df.res.deseq2[c(df.res.deseq2$padj<0.05),]
results.deseq2<-df.res.deseq2
#source("D:/Course/BIOS7695/Final projects/programs/3. edgeR.R")
load("D:/Course/BIOS7695/Final projects/programs/LRT.fit.edgeR.rdata")
results.edgeR<-LRT.fit.edgeR$table
results.edgeR$padj<-p.adjust(LRT.fit.edgeR$table$PValue,"BH")
results.edgeR$logCPM<-NULL
results.edgeR$LR<-NULL
colnames(results.edgeR)<-c("logFC.edgeR","pvalue.edgeR","padj.edgeR")
sig.edgeR<-results.edgeR[c(results.edgeR$padj<0.05),]
source("D:/Course/BIOS7695/Final projects/programs/4. Normalization.R")
source("D:/Course/BIOS7695/Final projects/programs/5. NBQsummary.R")
#Is gene name duplicated?
table(duplicated(rownames(counts)))
#So we can call them using gene name
#How many significane were detected?
dim(sig.deseq2)[1]
dim(sig.edgeR)[1]
dim(sig.NBPSeq)[1]
#Find out only
only.deseq2<-sig.deseq2[!(rownames(sig.deseq2) %in% rownames(sig.edgeR))&!(rownames(sig.deseq2) %in% rownames(sig.NBPSeq)),]
only.edgeR<-sig.edgeR[!(rownames(sig.edgeR) %in% rownames(sig.deseq2))&!(rownames(sig.edgeR) %in% rownames(sig.NBPSeq)),]
only.NBPSeq<-sig.NBPSeq[!(rownames(sig.NBPSeq) %in% rownames(sig.edgeR))&!(rownames(sig.NBPSeq) %in% rownames(sig.deseq2)),]
dim(only.deseq2)[1]
dim(only.edgeR)[1]
dim(only.NBPSeq)[1]
print(c("Only in DESeq2",dim(only.deseq2)[1]))
print(c("Only in edgeR",dim(only.edgeR)[1]))
print(c("Only in NBPSeq",dim(only.NBPSeq)[1]))
#Find out all
all.methods.name<-intersect(intersect(rownames(sig.deseq2),rownames(sig.edgeR)),rownames(sig.NBPSeq))
length(all.methods.name)
#Find out both
both.deseq2.edgeR<-sig.deseq2[intersect(rownames(sig.deseq2),rownames(sig.edgeR)),]
both.edgeR.NBPSeq<-sig.edgeR[intersect(rownames(sig.NBPSeq),rownames(sig.edgeR)),]
both.NBPSeq.deseq2<-sig.NBPSeq[intersect(rownames(sig.NBPSeq),rownames(sig.deseq2)),]
dim(both.deseq2.edgeR)[1]-length(all.methods.name)
dim(both.edgeR.NBPSeq)[1]-length(all.methods.name)
dim(both.NBPSeq.deseq2)[1]-length(all.methods.name)
#test if correct
dim(only.deseq2)[1]+dim(both.deseq2.edgeR)[1]+dim(both.NBPSeq.deseq2)[1]-length(all.methods.name)==dim(sig.deseq2)[1]
#Estimated log fold change of gene counts
#Merge average gene count to sig.deseq2, sig.edgeR, and sig.NBPSeq
norm.factors = estimate.norm.factors(counts)
ave.gene.count<-rowMeans(counts/norm.factors)
sig.deseq2<-merge(sig.deseq2, ave.gene.count, by="row.names")
sig.edgeR<-merge(sig.edgeR, ave.gene.count, by="row.names")
sig.NBPSeq<-merge(sig.NBPSeq, ave.gene.count, by="row.names")
background<-merge(results.edgeR, ave.gene.count, by="row.names")
p1 <- ggplot(data=background, aes(x = y, y = logFC.edgeR)) + geom_point(color="grey",shape = 4) +
geom_point(data=sig.deseq2,aes( x = y, y = logFC.deseq2),color="magenta",shape = 1, alpha = 0.9)+
geom_point(data=sig.edgeR,aes( x = y, y = logFC.edgeR),color="green",shape = 2, alpha = 0.5)+
geom_point(data=sig.NBPSeq,aes( x = y, y = logFC.NBQ),color="cyan",shape = 3, alpha = 0.3)+
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
labs(x = "Estimated Log Fold Change of Gene Counts",y = "Average Gene Counts")
p2 <- ggplot(data=background, aes(x = y, y = logFC.edgeR)) + geom_point(color="grey",shape = 4) +
geom_point(data=sig.deseq2,aes( x = y, y = logFC.deseq2),color="magenta",shape = 1)+
#  geom_point(data=sig.edgeR,aes( x = y, y = logFC.edgeR),color="green",shape = 2, alpha = 0.1)+
#  geom_point(data=sig.NBPSeq,aes( x = y, y = logFC.NBQ),color="cyan",shape = 3, alpha = 0.1)+
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
labs(x = "Estimated Log Fold Change of Gene Counts",y = "Average Gene Counts")
p3 <- ggplot(data=background, aes(x = y, y = logFC.edgeR)) + geom_point(color="grey",shape = 4) +
# geom_point(data=sig.deseq2,aes( x = y, y = logFC.deseq2),color="magenta",shape = 1, alpha = 0.8)+
geom_point(data=sig.edgeR,aes( x = y, y = logFC.edgeR),color="green",shape = 2)+
#  geom_point(data=sig.NBPSeq,aes( x = y, y = logFC.NBQ),color="cyan",shape = 3, alpha = 0.1)+
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
labs(x = "Estimated Log Fold Change of Gene Counts",y = "Average Gene Counts")
p4 <- ggplot(data=background, aes(x = y, y = logFC.edgeR)) + geom_point(color="grey",shape = 4) +
# geom_point(data=sig.deseq2,aes( x = y, y = logFC.deseq2),color="magenta",shape = 1, alpha = 0.8)+
# geom_point(data=sig.edgeR,aes( x = y, y = logFC.edgeR),color="green",shape = 2, alpha = 0.1)+
geom_point(data=sig.NBPSeq,aes( x = y, y = logFC.NBQ),color="cyan",shape = 3)+
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
labs(x = "Estimated Log Fold Change of Gene Counts",y = "Average Gene Counts")
ran.id<-random(seq(1,314),30)
ran.id<-sample(seq(1,314),30)
ran.id
set.seed(100)
ran.id<-sample(seq(1,314),30)
x = unlist(obj.NBPSeq.avect[seq(1,3000),ran.id])
y = unlist(obj.NBPSeq.distp[seq(1,3000),ran.id])
z = unlist(data.frame(NBPSeq.grp)[seq(1,3000),ran.id])
NB2glm.disp<-read.csv('NB2glm.disp.csv')
NB2glm.disp<-NB2glm.disp[,2]
table(is.na(NB2glm.disp))
ave.gene.count<-rowMeans(counts/norm.factors)
length(z)
dim(z)
p4 <- ggplot(data=NULL, aes(x = x, y = y,colour=z),shape = 1) + geom_point() +
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
scale_y_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
p4
set.seed(100)
ran.id<-sample(seq(1,314),100)
x = unlist(obj.NBPSeq.avect[seq(1,3000),ran.id])
y = unlist(obj.NBPSeq.distp[seq(1,3000),ran.id])
z = unlist(data.frame(NBPSeq.grp)[seq(1,3000),ran.id])
p4 <- ggplot(data=NULL, aes(x = x, y = y,colour=z),shape = 1) + geom_point() +
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
scale_y_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))
p4
p4 <- ggplot(data=NULL, aes(x = unlist(obj.NBPSeq.avect[seq(1,3000),ran.id]), y = unlist(obj.NBPSeq.distp[seq(1,3000),ran.id]),colour=unlist(data.frame(NBPSeq.grp)[seq(1,3000),ran.id])),shape = 1) + geom_point() +
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
scale_y_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))+
labs(x = "Average gene count",y = "Dispersion")
p4
p4 <- ggplot(data=NULL, aes(x = unlist(obj.NBPSeq.avect[seq(1,3000),ran.id]), y = unlist(obj.NBPSeq.distp[seq(1,3000),ran.id])),shape = 1) + geom_point() +
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
scale_y_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))+
labs(x = "Average gene count",y = "Dispersion")
p4
p8 <- ggplot(data=NULL, aes(x = unlist(obj.NBPSeq.avect[seq(1,3000),ran.id]), y = unlist(obj.NBPSeq.distp[seq(1,3000),ran.id])),shape = 1) + geom_point() +
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
scale_y_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))+
labs(x = "Average gene count",y = "Dispersion")
p9 <- ggplot(data=NULL, aes(x = unlist(obj.NBPSeq.avect[seq(3501,9500),ran.id]), y = unlist(obj.NBPSeq.distp[seq(3501,9500),ran.id])),shape = 1) + geom_point() +
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
scale_y_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))+
labs(x = "Average gene count",y = "Dispersion")
p10 <- ggplot(data=NULL, aes(x = unlist(obj.NBPSeq.avect[seq(10001,13081),ran.id]), y = unlist(obj.NBPSeq.distp[seq(10001,13081),ran.id])),shape = 1) + geom_point() +
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
scale_y_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))+
labs(x = "Average gene count",y = "Dispersion")
p11 <- ggplot(data=NULL, aes(x = unlist(obj.NBPSeq.avect[c(seq(3001,3500),seq(9501,10000),seq(13082,14081)),ran.id]), y = unlist(obj.NBPSeq.distp[c(seq(3001,3500),seq(9501,10000),seq(13082,14081)),ran.id])),shape = 1) + geom_point() +
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
scale_y_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))+
labs(x = "Average gene count",y = "Dispersion")
p12 <- ggplot(data=NULL, aes(x = unlist(obj.NBPSeq.avect[seq(14082,16081),ran.id]), y = unlist(obj.NBPSeq.distp[seq(14082,16081),ran.id])),shape = 1) + geom_point() +
scale_x_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x))) +
scale_y_log2(breaks = trans_breaks("log2", function(x) 2^x),
labels = trans_format("log2", math_format(2^.x)))+
labs(x = "Average gene count",y = "Dispersion")
p8
p9
p10
p11
p12
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=8)
library(knitr)
par(mfrow=c(3,2))
p5
par(mfrow=c(3,2))
p8
p9
p10
p11
p12
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=8)
library(knitr)
source("D:/Course/BIOS7695/Final projects/programs/7. Dispersion summary.R")
meanVarPlot(seq.counts,log=TRUE)
jpeg("boxplot.jpg", width = 600, height = 600)
par(mfrow=c(2,2))
boxplot(seq.counts,xlab ="314 subjects", xaxt = "n",main="Raw counts")
boxplot(counts.between.median,xlab ="314 subjects",main="Normalized counts, method=median", xaxt = "n")
boxplot(counts.between.upper,xlab ="314 subjects",main="Normalized counts, method=upper", xaxt = "n")
boxplot(counts.between.full,xlab ="314 subjects",main="Normalized counts, method=full", xaxt = "n")
dev.off()
jpeg("MA.jpg", width = 600, height = 600)
meanVarPlot(seq.counts,log=TRUE)
dev.off()
jpeg("foldchange.jpg", width = 600, height = 600)
par(mfrow=c(2,2))
p1
p2
p3
p4
dev.off()
jpeg("dispersion.jpg", width = 600, height = 600)
par(mfrow=c(2,2))
p5
p6
p7
dev.off()
jpeg("dispersion2.jpg", width = 600, height = 600)
par(mfrow=c(3,2))
p8
p9
p10
p11
p12
dev.off()
dev.off()
pdf(file="test.pdf")
par(mfrow=c(2,2))
boxplot(seq.counts,xlab ="314 subjects", xaxt = "n",main="Raw counts")
boxplot(counts.between.median,xlab ="314 subjects",main="Normalized counts, method=median", xaxt = "n")
boxplot(counts.between.upper,xlab ="314 subjects",main="Normalized counts, method=upper", xaxt = "n")
boxplot(counts.between.full,xlab ="314 subjects",main="Normalized counts, method=full", xaxt = "n")
meanVarPlot(seq.counts,log=TRUE)
par(mfrow=c(2,2))
p1
p2
p3
p4
par(mfrow=c(2,2))
p5
p6
p7
par(mfrow=c(3,2))
p8
p9
p10
p11
p12
dev.off()
View(fit.deseq2)
